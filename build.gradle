import groovy.json.JsonParserType

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
    }
}

//tasks.whenTaskAdded { task ->
//    if(task.name.contains('createMockableJar')) {
//        task.enabled = false
//    }
//    println task.name + task.enabled
//}

allprojects {
    repositories {
        google()
        jcenter()
    }
    buildDir = rootProject.projectDir.toString() + "/build/${project.name}"
    def deps = new groovy.json.JsonSlurper().setType(JsonParserType.LAX).parse(file(rootProject.projectDir.toString() + '/deps.json'))
    project.ext.set("deps", deps)
}

subprojects{ subproject ->
    if(subproject.name == 'Lineage_Dialer'){
        apply plugin:  'com.android.application'
    }
    else {
        apply plugin: 'com.android.library'
    }

    dependencies {
        def subdeps = deps[subproject.path]
        if(subdeps){
            subdeps.each{
                if(it[0] == ':') {
                    implementation project(it)
                }
                else {
                    implementation it
                }
            }
        }
    }

    android {
        compileSdkVersion 28

        lintOptions { 
            disable 'MissingTranslation','ExtraTranslation','NotSibling','ProtectedPermissions','AppCompatResource','ImpliedQuantity','RtlCompat','AppLinkUrlError','MissingDefaultResource','StringFormatMatches'
            //abortOnError false
        }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
        }           

        defaultConfig {
            minSdkVersion 28
            targetSdkVersion 28
            versionCode 1
            versionName "1.0"
        }

        sourceSets {
            def subProjectDir = subproject.projectDir.toString()
            def resDir = [ subProjectDir + '/res/' ]
            def manifestFile = subProjectDir + '/AndroidManifest.xml'

            // switch(subproject.name){
            //     case 'dialer.dialpadview':
            //         resDir += '../callcomposer/res'
            //         resDir += '../callcomposer/cameraui/res'
            //     //case 'dialer.calldetails':
            //         //resDir += '../app/res'
            //     default:
            //         break
            // }
            //resDir = resDir + (rootProject.projectDir.toString() + '/patch/' + subproject.name + '/res/')

            main {
                res.srcDirs = resDir
                manifest.srcFile manifestFile
            }
        }
    }
}